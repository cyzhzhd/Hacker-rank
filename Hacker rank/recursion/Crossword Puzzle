https://www.hackerrank.com/challenges/crossword-puzzle/problem

// Editorial

#include <vector>
#include <iostream>
#include <string>
using namespace std;

vector<string> grid(10);
vector<string> words;
bool f;

void call(int index)
{
    if (!f) 
        return;


    // print filled grid
    if (index == words.size()) 
    {
        if (f) 
        {
            for (auto word : grid) 
            {
                cout << word << endl;
            }
            f = false;
        }
        return;
    }

    int i, j, p, q, k;
    for (i = 0; i < 10; ++i) 
    {
        for (j = 0; j < 10; ++j) 
        {
            p = i, q = j;
            // Fill vertically
            for ( k = 0; k < words[index].size() && p + k < 10; ++k) 
            {
                if (grid[p + k][q] != '-' && grid[p + k][q] != words[index][k]) 
                {
                    break;
                }
            }

            if (k == words[index].size()) 
            {
                vector<string> temp = grid;
                for (k = 0; k < words[index].size(); ++k) 
                {
                    grid[p + k][q] = words[index][k];
                }
                call(index + 1);
                // roll back if the word is not fitting into the grid.
                grid = temp;
            }

            // Fill horizontally
            for (k = 0; k < words[index].size() && q + k < 10; ++k) 
            {
                if (grid[p][q + k] != '-' && grid[p][q + k] != words[index][k]) 
                {
                    break;
                }
            }

            if (k == words[index].size()) 
            {
                vector<string> temp = grid;
                for (k = 0; k < words[index].size(); ++k) 
                {
                    grid[p][q + k] = words[index][k];
                }
                call(index + 1);
                // roll back if the word is not fitting into the grid.
                grid = temp;
            }
        }
    }
}

int main()
{

    f = true;

    int i, j;
    for (i = 0; i < 10; ++i) {
        cin >> grid[i];
    }

    string tempString, word;
    cin >> word;

    for (auto x : word) 
    {
        if (x == ';') 
        {
            words.push_back(tempString);
            tempString = "";
        }
        else
            tempString += x;
    }
    words.push_back(tempString);
    call(0);

    return 0;
}





// Failed...

#include <vector>
#include <iostream>
#include <string>

using namespace std;

vector<string> split(string str, string token);
void FindLocation(vector<string> grid, vector<pair<int, int>>& verticalBlink, vector<pair<int, int>>& horizontalBlink);

int main()
{
    std::vector<std::string> grid(10);
    for (int i = 0; i < 10; ++i)
    {
        std::cin >> grid[i];
    }

    std::string words("");
    std::cin >> words;
    std::vector<std::string> word = split(words, ";");
    
    // Find all blink's (starting point, length) pair
    vector<pair<int, int>> verticalBlink(10, make_pair(-1,0));
    vector<pair<int, int>> horizontalBlink(10, make_pair(-1, 0));
    FindLocation(grid, verticalBlink, horizontalBlink);

    /*
    Need to fill blinks
    
    */
    

}

vector<string> split(string str, string token) {
    vector<string>result;
    while (str.size()) {
        int index = str.find(token);
        if (index != string::npos) {
            result.push_back(str.substr(0, index));
            str = str.substr(index + token.size());
            if (str.size() == 0)result.push_back(str);
        }
        else {
            result.push_back(str);
            str = "";
        }
    }
    return result;
}

void FindStartingLocation(vector<string> grid, vector<pair<int, int>>& verticalBlink, vector<pair<int, int>>& horizontalBlink)
{
    for (int i = 0; i < 10; ++i)
    {
        for (int j = 0; j < 10; ++j)
        {
            if (grid[i][j] == '-')
            {
                if (horizontalBlink[i].first == -1)
                {
                    horizontalBlink[i].first = j;
                    horizontalBlink[i].second++;
                }

                if (verticalBlink[j].first == -1)
                {
                    verticalBlink[j].first = i;
                    verticalBlink[j].second++;
                }
            }
        }
    }
}

void FindLocation(vector<string> grid, vector<pair<int, int>>& verticalBlink, vector<pair<int, int>>& horizontalBlink)
{
    FindStartingLocation(grid, verticalBlink, horizontalBlink);
    for (int i = 0; i < 10; ++i)
    {
        for (int j = 0; j < 9; ++j)
        {
            if (grid[i][j] == '-')
            {
                if (grid[i][j] == grid[i][j + 1])
                    horizontalBlink[i].second++;
            }
        }
    }


    for (int i = 0; i < 10; ++i)
    {
        for (int j = 0; j < 9; ++j)
        {
            if (grid[j][i] == '-')
            {
                if (grid[j][i] == grid[j+1][i])
                    verticalBlink[i].second++;
            }
        }
    }
}


void FillGrid(vector<string> grid, vector<pair<int, int>>& verticalBlink, vector<pair<int, int>>& horizontalBlink, vector<string> words)
{

    for (int i = 0; i < 10; ++i)
    {
        if (horizontalBlink[i].second <= 1)
            continue;
        for (string s : words)
        {
            if (s.size() != horizontalBlink[i].second)
                continue;
            for (char c : s)
            {
                int start(horizontalBlink[i].first);
                grid[i][start++] = c;
            }

            for (int j = horizontalBlink[i].first; j <= horizontalBlink[i].first + horizontalBlink[i].second; ++j)
            {
                if (verticalBlink[i].second <= 1)
                    continue;
                if (verticalBlink[j].first <= i && i <= verticalBlink[j].first + verticalBlink[j].second)
                {
                    for(string s : words)
                    {
                    }
                }
            }
        }
    }

    for (int i = 0; i < 10; ++i)
    {
        if (horizontalBlink[i].second > 1)
            std::cout << "horizontalBlink " << i << " = " << horizontalBlink[i].first << " , " << horizontalBlink[i].second << std::endl;
    }

}
