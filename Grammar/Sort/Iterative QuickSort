#include <iostream>
#include <stack>

void Swap(int* arr, int i, int j)
{
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

int Median(int* arr, int left, int right)
{
    int mid((left + right) / 2);
    if (arr[left] < arr[right])
    {
        if (arr[left] > arr[mid]) return left;
        else if (arr[mid] > arr[right]) return right;
        else return mid;
    }
    else
    {
        if (arr[right] > arr[mid]) return right;
        else if (arr[mid] > arr[left]) return left;
        else return mid;
    }
}

int Partition(int* arr, int left, int right)
{
    int pivIdx = Median(arr, left, right);
    int pivot = arr[pivIdx];
    Swap(arr, left, pivIdx);
    int low(left + 1), high(right);
    while (low <= high)
    {
        while (arr[low] <= pivot && low <= right) low++;
        while (arr[high] >= pivot && high >= (left + 1)) high--;
        if (low <= high)
            Swap(arr, low, high);
    }
    Swap(arr, left, high);
    return high;
}

void QuickSort(int* arr, int left, int right)
{
    std::stack<int> stack;
    stack.push(left);
    stack.push(right);

    while (!stack.empty())
    {
        int right = stack.top();
        stack.pop();
        int left = stack.top();
        stack.pop();
        int pivIdx = Partition(arr, left, right);

        if (pivIdx - 1 > left)
        {
            stack.push(left);
            stack.push(pivIdx - 1);
        }
        if (pivIdx + 1 < right)
        {
            stack.push(pivIdx + 1);
            stack.push(right);
        }
    }
}
int main()
{
    int arr[10]{ 10, 7, 2, 5, 6, 1, 3, 8, 2, 4 };
    QuickSort(arr, 0, 9);
    for (int i : arr)
        std::cout << i << " ";
    std::cout << std::endl;
}
