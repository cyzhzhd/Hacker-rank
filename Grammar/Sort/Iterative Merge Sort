#include <iostream>

void MergeTwoArea(int arr[], int left, int mid, int right)
{
    int lIdx(left), rIdx(mid + 1);
    int* sortArr = new int[right + 1];
    int sIdx(left);

    while (lIdx <= mid && rIdx <= right)
    {
        if (arr[lIdx] < arr[rIdx])
            sortArr[sIdx++] = arr[lIdx++];
        else
            sortArr[sIdx++] = arr[rIdx++];
    }

    if (lIdx > mid)
    {
        for (int i = rIdx; i <= right; ++i, ++sIdx)
            sortArr[sIdx] = arr[i];
    }
    else
    {
        for (int i = lIdx; i <= mid; ++i, ++sIdx)
            sortArr[sIdx] = arr[i];
    }

    for (int i = left; i <= right; ++i)
        arr[i] = sortArr[i];

    delete[] sortArr;
}



// Utility function to find minimum of two integers 
int min(int x, int y) { return (x < y) ? x : y; }

/* Iterative mergesort function to sort arr[0...n-1] */
void MergeSort(int arr[], int n)
{
    int curr_size;  // For current size of subarrays to be merged 
                    // curr_size varies from 1 to n/2 
    int left_start; // For picking starting index of left subarray 
                    // to be merged 

    // Merge subarrays in bottom up manner.  First merge subarrays of 
    // size 1 to create sorted subarrays of size 2, then merge subarrays 
    // of size 2 to create sorted subarrays of size 4, and so on. 
    for (curr_size = 1; curr_size <= n - 1; curr_size = 2 * curr_size)
    {
        // Pick starting point of different subarrays of current size 
        for (left_start = 0; left_start < n - 1; left_start += 2 * curr_size)
        {
            // Find ending point of left subarray. mid+1 is starting  
            // point of right 
            int mid = min(left_start + curr_size - 1, n - 1);

            int right_end = min(left_start + 2 * curr_size - 1, n - 1);

            // Merge Subarrays arr[left_start...mid] & arr[mid+1...right_end] 
            MergeTwoArea(arr, left_start, mid, right_end);
        }
    }
}
int main()
{
    int arr[11]{ 3, 2, 4, 1, 7, 6, 5, 3, 2, 6, 1 };

    MergeSort(arr, std::size(arr));

    for (int i : arr)
        std::cout << i << " ";
    std::cout << std::endl;
}
